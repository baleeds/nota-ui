/* eslint-disable */
import gql from 'graphql-tag';
import * as ApolloReactCommon from '@apollo/react-common';
import * as ApolloReactHooks from '@apollo/react-hooks';
export type Maybe<T> = T | null;

/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string,
  String: string,
  Boolean: boolean,
  Int: number,
  Float: number,
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: any,
};

export type ActiveRecord = {
  /** The date and time when then record was created */
  createdAt: Scalars['ISO8601DateTime'],
  /** The date and time the record was last updated */
  updatedAt: Scalars['ISO8601DateTime'],
};

export type Annotation = ActiveRecord & {
   __typename?: 'Annotation',
  /** The date and time when then record was created */
  createdAt: Scalars['ISO8601DateTime'],
  favorited: Scalars['Boolean'],
  id: Scalars['ID'],
  text: Scalars['String'],
  /** The date and time the record was last updated */
  updatedAt: Scalars['ISO8601DateTime'],
  user: User,
};

/** The connection type for Annotation. */
export type AnnotationConnection = {
   __typename?: 'AnnotationConnection',
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<AnnotationEdge>>>,
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Annotation>>>,
  /** Information to aid in pagination. */
  pageInfo: PageInfo,
};

/** An edge in a connection. */
export type AnnotationEdge = {
   __typename?: 'AnnotationEdge',
  /** A cursor for use in pagination. */
  cursor: Scalars['String'],
  /** The item at the end of the edge. */
  node?: Maybe<Annotation>,
};

/** Properties for an annotation */
export type AnnotationInput = {
  text: Scalars['String'],
  verseId: Scalars['ID'],
};

/** Autogenerated input type of CreateAnnotation */
export type CreateAnnotationInput = {
  annotationInput: AnnotationInput,
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>,
};

/** Autogenerated return type of CreateAnnotation */
export type CreateAnnotationPayload = {
   __typename?: 'CreateAnnotationPayload',
  annotation: Annotation,
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>,
  /** Validation error */
  errors?: Maybe<Array<Maybe<Error>>>,
};

/** Autogenerated input type of CreateUser */
export type CreateUserInput = {
  email: Scalars['String'],
  isAdmin: Scalars['Boolean'],
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>,
};

/** Autogenerated return type of CreateUser */
export type CreateUserPayload = {
   __typename?: 'CreateUserPayload',
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>,
  /** Validation error */
  errors?: Maybe<Array<Maybe<Error>>>,
  user?: Maybe<User>,
};

export type Error = {
   __typename?: 'Error',
  /** The field the error relates to */
  field: Scalars['String'],
  /** The error message */
  message: Scalars['String'],
};

/** Autogenerated input type of FavoriteAnnotation */
export type FavoriteAnnotationInput = {
  annotationId: Scalars['ID'],
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>,
};

/** Autogenerated return type of FavoriteAnnotation */
export type FavoriteAnnotationPayload = {
   __typename?: 'FavoriteAnnotationPayload',
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>,
  /** Validation error */
  errors?: Maybe<Array<Maybe<Error>>>,
  success?: Maybe<Scalars['Boolean']>,
};

/** Autogenerated input type of InvalidateToken */
export type InvalidateTokenInput = {
  userId: Scalars['ID'],
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>,
};

/** Autogenerated return type of InvalidateToken */
export type InvalidateTokenPayload = {
   __typename?: 'InvalidateTokenPayload',
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>,
  /** Validation error */
  errors?: Maybe<Array<Maybe<Error>>>,
  success: Scalars['Boolean'],
};


export type Mutation = {
   __typename?: 'Mutation',
  /** Create an annotation */
  createAnnotation?: Maybe<CreateAnnotationPayload>,
  /** Admin ability to create a user */
  createUser?: Maybe<CreateUserPayload>,
  /** Favorites an annotation */
  favoriteAnnotation?: Maybe<FavoriteAnnotationPayload>,
  /** Invalidates a user's token */
  invalidateToken?: Maybe<InvalidateTokenPayload>,
  /** 
 * When an access token expires this mutation should be hit with a valid
   * refresh token. It will issue a new access token and a new refresh token.
 */
  refreshTokens?: Maybe<RefreshTokensPayload>,
  /** Resets the user's password and returns valid tokens */
  resetPassword?: Maybe<ResetPasswordPayload>,
  /** Triggers a reset password email */
  sendResetPassword?: Maybe<SendResetPasswordPayload>,
  /** Sign the user in */
  signInUser?: Maybe<SignInUserPayload>,
  /** Suspend a user */
  suspendUser?: Maybe<SuspendUserPayload>,
  /** Unfavorites an annotation */
  unfavoriteAnnotation?: Maybe<UnfavoriteAnnotationPayload>,
  /** Unsuspend a user */
  unsuspendUser?: Maybe<UnsuspendUserPayload>,
  /** Updates the password of the current user */
  updatePassword?: Maybe<UpdatePasswordPayload>,
};


export type MutationCreateAnnotationArgs = {
  input: CreateAnnotationInput
};


export type MutationCreateUserArgs = {
  input: CreateUserInput
};


export type MutationFavoriteAnnotationArgs = {
  input: FavoriteAnnotationInput
};


export type MutationInvalidateTokenArgs = {
  input: InvalidateTokenInput
};


export type MutationRefreshTokensArgs = {
  input: RefreshTokensInput
};


export type MutationResetPasswordArgs = {
  input: ResetPasswordInput
};


export type MutationSendResetPasswordArgs = {
  input: SendResetPasswordInput
};


export type MutationSignInUserArgs = {
  input: SignInUserInput
};


export type MutationSuspendUserArgs = {
  input: SuspendUserInput
};


export type MutationUnfavoriteAnnotationArgs = {
  input: UnfavoriteAnnotationInput
};


export type MutationUnsuspendUserArgs = {
  input: UnsuspendUserInput
};


export type MutationUpdatePasswordArgs = {
  input: UpdatePasswordInput
};

/** Information about pagination in a connection. */
export type PageInfo = {
   __typename?: 'PageInfo',
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']>,
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'],
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'],
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']>,
};

export type Query = {
   __typename?: 'Query',
  /** Get an annotation */
  annotation: Annotation,
  /** Gets all public annotations */
  annotations: AnnotationConnection,
  /** Returns the currently logged in user */
  me?: Maybe<User>,
  /** Gets all of my annotations */
  myAnnotations: AnnotationConnection,
  /** Return the specified user */
  user: User,
  /** Get all users */
  users: UserConnection,
  /** Get an annotation */
  verse: Verse,
};


export type QueryAnnotationArgs = {
  annotationId: Scalars['ID']
};


export type QueryAnnotationsArgs = {
  verseId: Scalars['ID'],
  after?: Maybe<Scalars['String']>,
  before?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type QueryMyAnnotationsArgs = {
  after?: Maybe<Scalars['String']>,
  before?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type QueryUserArgs = {
  userId: Scalars['ID']
};


export type QueryUsersArgs = {
  after?: Maybe<Scalars['String']>,
  before?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type QueryVerseArgs = {
  verseId: Scalars['ID']
};

/** Autogenerated input type of RefreshTokens */
export type RefreshTokensInput = {
  refreshToken: Scalars['String'],
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>,
};

/** Autogenerated return type of RefreshTokens */
export type RefreshTokensPayload = {
   __typename?: 'RefreshTokensPayload',
  accessToken?: Maybe<Scalars['String']>,
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>,
  /** Validation error */
  errors?: Maybe<Array<Maybe<Error>>>,
  refreshToken?: Maybe<Scalars['String']>,
  user?: Maybe<User>,
};

/** Autogenerated input type of ResetPassword */
export type ResetPasswordInput = {
  password: Scalars['String'],
  resetPasswordToken: Scalars['String'],
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>,
};

/** Autogenerated return type of ResetPassword */
export type ResetPasswordPayload = {
   __typename?: 'ResetPasswordPayload',
  accessToken?: Maybe<Scalars['String']>,
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>,
  /** Validation error */
  errors?: Maybe<Array<Maybe<Error>>>,
  refreshToken?: Maybe<Scalars['String']>,
  user?: Maybe<User>,
};

/** Autogenerated input type of SendResetPassword */
export type SendResetPasswordInput = {
  email: Scalars['String'],
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>,
};

/** Autogenerated return type of SendResetPassword */
export type SendResetPasswordPayload = {
   __typename?: 'SendResetPasswordPayload',
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>,
  success: Scalars['Boolean'],
};

/** Autogenerated input type of SignInUser */
export type SignInUserInput = {
  email: Scalars['String'],
  password: Scalars['String'],
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>,
};

/** Autogenerated return type of SignInUser */
export type SignInUserPayload = {
   __typename?: 'SignInUserPayload',
  accessToken?: Maybe<Scalars['String']>,
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>,
  /** Validation error */
  errors?: Maybe<Array<Maybe<Error>>>,
  refreshToken?: Maybe<Scalars['String']>,
  user?: Maybe<User>,
};

/** Autogenerated input type of SuspendUser */
export type SuspendUserInput = {
  userId: Scalars['ID'],
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>,
};

/** Autogenerated return type of SuspendUser */
export type SuspendUserPayload = {
   __typename?: 'SuspendUserPayload',
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>,
  /** Validation error */
  errors?: Maybe<Array<Maybe<Error>>>,
  user?: Maybe<User>,
};

/** Autogenerated input type of UnfavoriteAnnotation */
export type UnfavoriteAnnotationInput = {
  annotationId: Scalars['ID'],
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>,
};

/** Autogenerated return type of UnfavoriteAnnotation */
export type UnfavoriteAnnotationPayload = {
   __typename?: 'UnfavoriteAnnotationPayload',
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>,
  /** Validation error */
  errors?: Maybe<Array<Maybe<Error>>>,
  success?: Maybe<Scalars['Boolean']>,
};

/** Autogenerated input type of UnsuspendUser */
export type UnsuspendUserInput = {
  userId: Scalars['ID'],
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>,
};

/** Autogenerated return type of UnsuspendUser */
export type UnsuspendUserPayload = {
   __typename?: 'UnsuspendUserPayload',
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>,
  /** Validation error */
  errors?: Maybe<Array<Maybe<Error>>>,
  user?: Maybe<User>,
};

/** Autogenerated input type of UpdatePassword */
export type UpdatePasswordInput = {
  currentPassword: Scalars['String'],
  newPassword: Scalars['String'],
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>,
};

/** Autogenerated return type of UpdatePassword */
export type UpdatePasswordPayload = {
   __typename?: 'UpdatePasswordPayload',
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>,
  /** Validation error */
  errors?: Maybe<Array<Maybe<Error>>>,
  user?: Maybe<User>,
};

export type User = ActiveRecord & {
   __typename?: 'User',
  /** The date and time when then record was created */
  createdAt: Scalars['ISO8601DateTime'],
  email: Scalars['String'],
  id: Scalars['ID'],
  isActive: Scalars['Boolean'],
  isAdmin: Scalars['Boolean'],
  /** The date and time the record was last updated */
  updatedAt: Scalars['ISO8601DateTime'],
};

/** The connection type for User. */
export type UserConnection = {
   __typename?: 'UserConnection',
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<UserEdge>>>,
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<User>>>,
  /** Information to aid in pagination. */
  pageInfo: PageInfo,
};

/** An edge in a connection. */
export type UserEdge = {
   __typename?: 'UserEdge',
  /** A cursor for use in pagination. */
  cursor: Scalars['String'],
  /** The item at the end of the edge. */
  node?: Maybe<User>,
};

export type Verse = ActiveRecord & {
   __typename?: 'Verse',
  /** The date and time when then record was created */
  createdAt: Scalars['ISO8601DateTime'],
  id: Scalars['ID'],
  numberOfAnnotations?: Maybe<Scalars['Int']>,
  numberOfMyAnnotations?: Maybe<Scalars['Int']>,
  /** The date and time the record was last updated */
  updatedAt: Scalars['ISO8601DateTime'],
};

export type MeFragment = (
  { __typename?: 'User' }
  & Pick<User, 'id' | 'email'>
);

export type PublicAnnotationFragment = (
  { __typename?: 'Annotation' }
  & Pick<Annotation, 'id' | 'text' | 'createdAt'>
  & { user: (
    { __typename?: 'User' }
    & Pick<User, 'id' | 'email'>
  ) }
);

export type SignInUserMutationVariables = {
  input: SignInUserInput
};


export type SignInUserMutation = (
  { __typename?: 'Mutation' }
  & { signInUser: Maybe<(
    { __typename?: 'SignInUserPayload' }
    & Pick<SignInUserPayload, 'accessToken' | 'refreshToken'>
    & { user: Maybe<(
      { __typename?: 'User' }
      & MeFragment
    )>, errors: Maybe<Array<Maybe<(
      { __typename?: 'Error' }
      & Pick<Error, 'field' | 'message'>
    )>>> }
  )> }
);

export type PublicAnnotationsQueryVariables = {
  first?: Maybe<Scalars['Int']>,
  verseId: Scalars['ID']
};


export type PublicAnnotationsQuery = (
  { __typename?: 'Query' }
  & { annotations: (
    { __typename?: 'AnnotationConnection' }
    & { edges: Maybe<Array<Maybe<(
      { __typename?: 'AnnotationEdge' }
      & { node: Maybe<(
        { __typename?: 'Annotation' }
        & PublicAnnotationFragment
      )> }
    )>>> }
  ) }
);

export const MeFragmentDoc = gql`
    fragment Me on User {
  id
  email
}
    `;
export const PublicAnnotationFragmentDoc = gql`
    fragment PublicAnnotation on Annotation {
  id
  text
  createdAt
  user {
    id
    email
  }
}
    `;
export const SignInUserDocument = gql`
    mutation SignInUser($input: SignInUserInput!) {
  signInUser(input: $input) {
    accessToken
    refreshToken
    user {
      ...Me
    }
    errors {
      field
      message
    }
  }
}
    ${MeFragmentDoc}`;
export type SignInUserMutationFn = ApolloReactCommon.MutationFunction<SignInUserMutation, SignInUserMutationVariables>;

/**
 * __useSignInUserMutation__
 *
 * To run a mutation, you first call `useSignInUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSignInUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [signInUserMutation, { data, loading, error }] = useSignInUserMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSignInUserMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SignInUserMutation, SignInUserMutationVariables>) {
        return ApolloReactHooks.useMutation<SignInUserMutation, SignInUserMutationVariables>(SignInUserDocument, baseOptions);
      }
export type SignInUserMutationHookResult = ReturnType<typeof useSignInUserMutation>;
export type SignInUserMutationResult = ApolloReactCommon.MutationResult<SignInUserMutation>;
export type SignInUserMutationOptions = ApolloReactCommon.BaseMutationOptions<SignInUserMutation, SignInUserMutationVariables>;
export const PublicAnnotationsDocument = gql`
    query PublicAnnotations($first: Int, $verseId: ID!) {
  annotations(first: $first, verseId: $verseId) {
    edges {
      node {
        ...PublicAnnotation
      }
    }
  }
}
    ${PublicAnnotationFragmentDoc}`;

/**
 * __usePublicAnnotationsQuery__
 *
 * To run a query within a React component, call `usePublicAnnotationsQuery` and pass it any options that fit your needs.
 * When your component renders, `usePublicAnnotationsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePublicAnnotationsQuery({
 *   variables: {
 *      first: // value for 'first'
 *      verseId: // value for 'verseId'
 *   },
 * });
 */
export function usePublicAnnotationsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<PublicAnnotationsQuery, PublicAnnotationsQueryVariables>) {
        return ApolloReactHooks.useQuery<PublicAnnotationsQuery, PublicAnnotationsQueryVariables>(PublicAnnotationsDocument, baseOptions);
      }
export function usePublicAnnotationsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<PublicAnnotationsQuery, PublicAnnotationsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<PublicAnnotationsQuery, PublicAnnotationsQueryVariables>(PublicAnnotationsDocument, baseOptions);
        }
export type PublicAnnotationsQueryHookResult = ReturnType<typeof usePublicAnnotationsQuery>;
export type PublicAnnotationsLazyQueryHookResult = ReturnType<typeof usePublicAnnotationsLazyQuery>;
export type PublicAnnotationsQueryResult = ApolloReactCommon.QueryResult<PublicAnnotationsQuery, PublicAnnotationsQueryVariables>;